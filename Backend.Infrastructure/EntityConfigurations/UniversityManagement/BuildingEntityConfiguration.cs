using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata.Builders;
using UCR.ECCI.PI.ThemePark.Backend.Domain.Entities.UniversityManagement;
using UCR.ECCI.PI.ThemePark.Backend.Domain.ValueObjects.UniversityManagement;

namespace UCR.ECCI.PI.ThemePark.Backend.Infrastructure.EntityConfigurations.UniversityManagement;

/// <summary>
/// Provides configuration for the <see cref="Building"/> entity to be used by Entity Framework Core.
/// </summary>
internal class BuildingEntityConfiguration : IEntityTypeConfiguration<Building>
{
    /// <summary>
    /// Configures the entity type mapping for the <see cref="Building"/> class.
    /// </summary>
    /// <param name="builder">The builder being used to configure the entity.</param>
    public void Configure(EntityTypeBuilder<Building> builder)
    {
        // Maps to "Building" table
        builder.ToTable("Building", "Infrastructure", tb=> tb.UseSqlOutputClause(false));

        // Configures the primary key
        builder.HasKey(b => b.BuildingInternalId);

        // Configures the internal ID to be generated by the database
        builder.Property(b => b.BuildingInternalId)
            .ValueGeneratedOnAdd();

        // Configures the Name property with a maximum length and conversion from value object
        builder.Property(b => b.Name)
            .IsRequired()
            .HasMaxLength(100)
            .HasConversion(
                convertToProviderExpression: nameValueObject => nameValueObject!.Name,
                convertFromProviderExpression: nameString => EntityName.Create(nameString));

        // Configures the BuildingCoordinates as an owned type with precision for X, Y, Z
        builder.OwnsOne(b => b.BuildingCoordinates, coords =>
        {
            coords.Property(c => c.X)
                .HasColumnName("X")
                .HasColumnType("decimal(9,6)");

            coords.Property(c => c.Y)
                .HasColumnName("Y")
                .HasColumnType("decimal(9,6)");

            coords.Property(c => c.Z)
                .HasColumnName("Z")
                .HasColumnType("decimal(9,6)");
        });

        // Configures the Dimensions as an owned type with Width, Length, and Height
        builder.OwnsOne(b => b.Dimensions, dims =>
        {
            dims.Property(d => d.Width)
                .HasColumnName("Width")
                .HasColumnType("decimal(6,2)");

            dims.Property(d => d.Length)
                .HasColumnName("Length")
                .HasColumnType("decimal(6,2)");

            dims.Property(d => d.Height)
                .HasColumnName("Height")
                .HasColumnType("decimal(6,2)");
        });

        // Configures the Color property with a max length and conversion from value object
        builder.Property(building => building.Color)
            .IsRequired()
            .HasMaxLength(50)
            .HasConversion(
                convertToProviderExpression: colorValueObject => colorValueObject!.Value,
                convertFromProviderExpression: colorString => Colors.Create(colorString));

        // Configures the relationship between Building and Area via AreaName (foreign key)
        builder.HasOne(b => b.Area)
            .WithMany()
            .HasForeignKey(b => b.AreaName)
            .IsRequired();

        // Configures the AreaName property with a max length and conversion from value object
        builder.Property(b => b.AreaName)
            .IsRequired()
            .HasMaxLength(100)
            .HasConversion(
                convertToProviderExpression: nameValueObject => nameValueObject.Name,
                convertFromProviderExpression: nameString => EntityName.Create(nameString));

    }
}
