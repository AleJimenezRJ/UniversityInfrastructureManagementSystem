// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace UCR.ECCI.PI.ThemePark.Frontend.Blazor.Infrastructure.Kiota.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    #pragma warning disable CS1591
    public partial class LearningComponentAuditDto : IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The action property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Action { get; set; }
#nullable restore
#else
        public string Action { get; set; }
#endif
        /// <summary>The componentId property</summary>
        public int? ComponentId { get; set; }
        /// <summary>The componentType property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ComponentType { get; set; }
#nullable restore
#else
        public string ComponentType { get; set; }
#endif
        /// <summary>The depth property</summary>
        public double? Depth { get; set; }
        /// <summary>The height property</summary>
        public double? Height { get; set; }
        /// <summary>The isDeleted property</summary>
        public bool? IsDeleted { get; set; }
        /// <summary>The learningComponentAuditId property</summary>
        public int? LearningComponentAuditId { get; set; }
        /// <summary>The markerColor property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MarkerColor { get; set; }
#nullable restore
#else
        public string MarkerColor { get; set; }
#endif
        /// <summary>The modifiedAt property</summary>
        public DateTimeOffset? ModifiedAt { get; set; }
        /// <summary>The orientation property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Orientation { get; set; }
#nullable restore
#else
        public string Orientation { get; set; }
#endif
        /// <summary>The projectedContent property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ProjectedContent { get; set; }
#nullable restore
#else
        public string ProjectedContent { get; set; }
#endif
        /// <summary>The projectedHeight property</summary>
        public double? ProjectedHeight { get; set; }
        /// <summary>The projectedWidth property</summary>
        public double? ProjectedWidth { get; set; }
        /// <summary>The width property</summary>
        public double? Width { get; set; }
        /// <summary>The x property</summary>
        public double? X { get; set; }
        /// <summary>The y property</summary>
        public double? Y { get; set; }
        /// <summary>The z property</summary>
        public double? Z { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::UCR.ECCI.PI.ThemePark.Frontend.Blazor.Infrastructure.Kiota.Models.LearningComponentAuditDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::UCR.ECCI.PI.ThemePark.Frontend.Blazor.Infrastructure.Kiota.Models.LearningComponentAuditDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::UCR.ECCI.PI.ThemePark.Frontend.Blazor.Infrastructure.Kiota.Models.LearningComponentAuditDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "action", n => { Action = n.GetStringValue(); } },
                { "componentId", n => { ComponentId = n.GetIntValue(); } },
                { "componentType", n => { ComponentType = n.GetStringValue(); } },
                { "depth", n => { Depth = n.GetDoubleValue(); } },
                { "height", n => { Height = n.GetDoubleValue(); } },
                { "isDeleted", n => { IsDeleted = n.GetBoolValue(); } },
                { "learningComponentAuditId", n => { LearningComponentAuditId = n.GetIntValue(); } },
                { "markerColor", n => { MarkerColor = n.GetStringValue(); } },
                { "modifiedAt", n => { ModifiedAt = n.GetDateTimeOffsetValue(); } },
                { "orientation", n => { Orientation = n.GetStringValue(); } },
                { "projectedContent", n => { ProjectedContent = n.GetStringValue(); } },
                { "projectedHeight", n => { ProjectedHeight = n.GetDoubleValue(); } },
                { "projectedWidth", n => { ProjectedWidth = n.GetDoubleValue(); } },
                { "width", n => { Width = n.GetDoubleValue(); } },
                { "x", n => { X = n.GetDoubleValue(); } },
                { "y", n => { Y = n.GetDoubleValue(); } },
                { "z", n => { Z = n.GetDoubleValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("action", Action);
            writer.WriteIntValue("componentId", ComponentId);
            writer.WriteStringValue("componentType", ComponentType);
            writer.WriteDoubleValue("depth", Depth);
            writer.WriteDoubleValue("height", Height);
            writer.WriteBoolValue("isDeleted", IsDeleted);
            writer.WriteIntValue("learningComponentAuditId", LearningComponentAuditId);
            writer.WriteStringValue("markerColor", MarkerColor);
            writer.WriteDateTimeOffsetValue("modifiedAt", ModifiedAt);
            writer.WriteStringValue("orientation", Orientation);
            writer.WriteStringValue("projectedContent", ProjectedContent);
            writer.WriteDoubleValue("projectedHeight", ProjectedHeight);
            writer.WriteDoubleValue("projectedWidth", ProjectedWidth);
            writer.WriteDoubleValue("width", Width);
            writer.WriteDoubleValue("x", X);
            writer.WriteDoubleValue("y", Y);
            writer.WriteDoubleValue("z", Z);
        }
    }
}
#pragma warning restore CS0618
