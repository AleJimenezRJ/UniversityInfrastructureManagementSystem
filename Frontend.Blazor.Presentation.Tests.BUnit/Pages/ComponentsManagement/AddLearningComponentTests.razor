@using Microsoft.AspNetCore.Components.Rendering
@using Moq;
@using MudBlazor;
@using MudBlazor.Services;
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.Entities.ComponentsManagement;
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.ValueObjects;
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Application.Services;
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Presentation.Pages.ComponentsManagement;
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.ValueObjects.UniversityManagement;
@using Colors = UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.ValueObjects.UniversityManagement.Colors;
@using Size = UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.ValueObjects.Spaces.Size;
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.Entities.UniversityManagement;
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.ValueObjects.Spaces;
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.Entities.Spaces;
@using FluentAssertions;

@inherits TestContext

@code {
    /// <summary>
    /// Initializes the test context and configures necessary services and JSInterop for MudBlazor.
    /// </summary>
    public AddLearningComponentTests()
    {
        Services.AddMudServices();

        // Setup JSInterop mocks for MudBlazor components
        JSInterop.SetupVoid("mudElementRef.addOnBlurEvent", _ => true);
        JSInterop.SetupVoid("mudPopover.initialize", _ => true);
        JSInterop.SetupVoid("mudKeyInterceptor.connect", _ => true);
        JSInterop.SetupVoid("mudPopover.connect", _ => true);
        JSInterop.SetupVoid("mudScrollManager.lockScroll", _ => true);
        JSInterop.SetupVoid("mudScrollManager.unlockScroll", _ => true);
        JSInterop.SetupVoid("mudSelectResize.connect", _ => true);
        JSInterop.SetupVoid("mudSelectResize.disconnect", _ => true);
        JSInterop.Setup<int>("mudpopoverHelper.countProviders", _ => true).SetResult(1);
    }

    /// <summary>
    /// Verifies that the page renders correctly with all required form elements.
    /// </summary>
    [Fact]
    public void PageRendersCorrectly_WithAllFormElements()
    {
        // Arrange
        var cut = RenderAddLearningComponentPage();

        // Assert
        cut.Markup.Should().Contain("Agregar Componente");
        cut.Markup.Should().Contain("Tipo de componente");
        cut.Markup.Should().Contain("Edificio:");
        cut.Markup.Should().Contain("Piso:");
        cut.Markup.Should().Contain("Espacio de aprendizaje:");
        
        // Check that component type dropdown exists
        cut.FindComponent<MudSelect<string>>().Should().NotBeNull();
    }

    /// <summary>
    /// Verifies that breadcrumb navigation is rendered correctly.
    /// </summary>
    [Fact]
    public void BreadcrumbNavigation_RendersCorrectly()
    {
        // Arrange
        var cut = RenderAddLearningComponentPage();
        var breadcrumb = cut.FindComponent<MudBreadcrumbs>();

        // Assert
        breadcrumb.Should().NotBeNull();
        cut.Markup.Should().Contain("INICIO");
        cut.Markup.Should().Contain("EDIFICIOS");
        cut.Markup.Should().Contain("PISOS");
        cut.Markup.Should().Contain("ESPACIOS DE APRENDIZAJE");
    }

    /// <summary>
    /// Verifies that the page displays building and space information.
    /// </summary>
    [Fact]
    public void PageDisplaysContextInformation()
    {
        // Arrange
        var cut = RenderAddLearningComponentPage();

        // Assert
        cut.Markup.Should().Contain("Test Building");
        cut.Markup.Should().Contain("Test Space");
    }

    /// <summary>
    /// Verifies that the component type selection dropdown is present.
    /// </summary>
    [Fact]
    public void ComponentTypeSelection_IsPresent()
    {
        // Arrange
        var cut = RenderAddLearningComponentPage();

        // Assert
        cut.Markup.Should().Contain("Tipo de componente");
        var select = cut.FindComponent<MudSelect<string>>();
        select.Should().NotBeNull();
    }

    /// <summary>
    /// Helper method to render the AddLearningComponent page with mocked services.
    /// </summary>
    private IRenderedComponent<PopoverLayout> RenderAddLearningComponentPage(
        ILearningComponentServices? learningComponentService = null,
        IBuildingsServices? buildingService = null,
        IFloorServices? floorService = null,
        ILearningSpaceServices? learningSpaceService = null,
        IProjectorServices? projectorService = null,
        IWhiteboardServices? whiteboardService = null)
    {
        // Set up default mock services
        var buildingServiceMock = new Mock<IBuildingsServices>();
        buildingServiceMock.Setup(s => s.DisplayBuildingAsync(1))
            .ReturnsAsync(new Building(EntityName.Create("Test Building"), Coordinates.Create(1, 1, 1), 
                Dimension.Create(10, 10, 10), Colors.Create("White"), EntityName.Create("Test Area")));

        var floorServiceMock = new Mock<IFloorServices>();
        floorServiceMock.Setup(s => s.GetFloorsListAsync(1))
            .ReturnsAsync(new List<Floor> { new Floor(1, FloorNumber.Create(1)) });

        var learningSpaceServiceMock = new Mock<ILearningSpaceServices>();
        learningSpaceServiceMock.Setup(s => s.GetLearningSpaceAsync(1))
            .ReturnsAsync(new LearningSpace(EntityName.Create("Test Space"), LearningSpaceType.Create("Classroom"),
                Capacity.Create(30), Size.Create(10), Size.Create(10), Size.Create(3),
                Colors.Create("White"), Colors.Create("White"), Colors.Create("White")));

        var projectorServiceMock = new Mock<IProjectorServices>();
        var whiteboardServiceMock = new Mock<IWhiteboardServices>();

        // Setup default LearningComponentService mock if not provided
        if (learningComponentService == null)
        {
            var defaultLearningComponentService = new Mock<ILearningComponentServices>();
            defaultLearningComponentService.Setup(s => s.GetLearningComponentsByIdAsync(It.IsAny<int>(), It.IsAny<int>(), It.IsAny<int>(), It.IsAny<string>()))
                .ReturnsAsync(new PaginatedList<LearningComponent>(new List<LearningComponent>(), 0, 20, 0));
            learningComponentService = defaultLearningComponentService.Object;
        }

        Services.AddSingleton(learningComponentService);
        Services.AddSingleton(buildingService ?? buildingServiceMock.Object);
        Services.AddSingleton(floorService ?? floorServiceMock.Object);
        Services.AddSingleton(learningSpaceService ?? learningSpaceServiceMock.Object);
        Services.AddSingleton(projectorService ?? projectorServiceMock.Object);
        Services.AddSingleton(whiteboardService ?? whiteboardServiceMock.Object);

        return RenderComponent<PopoverLayout>(parameters => parameters
            .AddChildContent<AddLearningComponent>(childParams => childParams
                .Add(p => p.buildingId, 1)
                .Add(p => p.floorId, 1)
                .Add(p => p.learningSpaceId, 1)
            ));
    }

    /// <summary>
    /// Layout component that wraps child content with MudPopoverProvider,
    /// enabling MudBlazor popover behavior during tests.
    /// </summary>
    public class PopoverLayout : ComponentBase
    {
        [Parameter] public RenderFragment? ChildContent { get; set; }

        protected override void BuildRenderTree(RenderTreeBuilder builder)
        {
            builder.OpenComponent<MudPopoverProvider>(0);
            builder.CloseComponent();

            builder.AddContent(1, ChildContent);
        }
    }
}
