@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Rendering
@using Moq;
@using MudBlazor;
@using MudBlazor.Services;
@using System.Security.Claims
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.Entities.ComponentsManagement;
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.ValueObjects;
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Application.Services;
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Presentation.Pages.ComponentsManagement;
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.ValueObjects.ComponentsManagement;
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.ValueObjects.UniversityManagement;
@using Orientation = UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.ValueObjects.ComponentsManagement.Orientation;
@using Colors = UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.ValueObjects.UniversityManagement.Colors;
@using Size = UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.ValueObjects.Spaces.Size;
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.Entities.UniversityManagement;
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.ValueObjects.Spaces;
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.Entities.Spaces;
@using FluentAssertions;

@inherits TestContext

@code {
    /// <summary>
    /// Initializes the test context and configures necessary services and JSInterop for MudBlazor.
    /// </summary>
    public ListLearningComponentIdTests()
    {
        Services.AddMudServices();

        JSInterop.SetupVoid("mudElementRef.addOnBlurEvent", _ => true);
        JSInterop.SetupVoid("mudPopover.initialize", _ => true);
        JSInterop.SetupVoid("mudKeyInterceptor.connect", _ => true);
        JSInterop.SetupVoid("mudPopover.connect", _ => true);
        JSInterop.Setup<int>("mudpopoverHelper.countProviders", _ => true).SetResult(1);

        // Register authentication and authorization dependencies required for AuthorizeView

        // 1. Add fake authentication state provider (TestAuthorizationContext)
        var authContext = this.AddTestAuthorization();
        authContext.SetAuthorized("TestUser");

        // 2. Mock IAuthorizationService to always allow access (or customize as needed)
        var authServiceMock = new Mock<IAuthorizationService>();
        authServiceMock
            .Setup(x => x.AuthorizeAsync(It.IsAny<ClaimsPrincipal>(), It.IsAny<object>(), It.IsAny<IEnumerable<IAuthorizationRequirement>>()))
            .ReturnsAsync(AuthorizationResult.Success());

        Services.AddSingleton<IAuthorizationService>(authServiceMock.Object);

        // 3. Mock IAuthorizationPolicyProvider (required by AuthorizeView)
        var policyProviderMock = new Mock<IAuthorizationPolicyProvider>();
        policyProviderMock
            .Setup(p => p.GetPolicyAsync(It.IsAny<string>()))
            .ReturnsAsync(new AuthorizationPolicyBuilder().RequireAssertion(_ => true).Build());

        Services.AddSingleton<IAuthorizationPolicyProvider>(policyProviderMock.Object);
    }

    /// <summary>
    /// Verifies that the page shows an empty message when no components are returned.
    /// </summary>
    [Fact]
    public async Task PageRendersEmptyState_WhenNoComponents()
    {
        // Arrange
        var paginated = new PaginatedList<LearningComponent>(new List<LearningComponent>(), 0, 10, 0);

        var learningComponentServiceMock = new Mock<ILearningComponentServices>();
        var buildingServiceMock = new Mock<IBuildingsServices>();
        var floorServiceMock = new Mock<IFloorServices>();
        var learningSpaceServiceMock = new Mock<ILearningSpaceServices>();
        var permissionContextMock = new Mock<IPermissionContext>();

        learningComponentServiceMock
            .Setup(s => s.GetLearningComponentsByIdAsync(1, 10, 0, It.IsAny<string>()))
            .ReturnsAsync(paginated);

        buildingServiceMock
            .Setup(s => s.DisplayBuildingAsync(1))
            .ReturnsAsync(new Building(EntityName.Create("Building A"), Coordinates.Create(1, 1, 1), Dimension.Create(1, 1, 10),
                Colors.Create("White"), EntityName.Create("Area")));

        floorServiceMock
            .Setup(s => s.GetFloorsListAsync(1))
            .ReturnsAsync(new List<Floor> { new Floor(1, FloorNumber.Create(1)) });

        learningSpaceServiceMock
            .Setup(s => s.GetLearningSpaceAsync(1))
            .ReturnsAsync(new LearningSpace(EntityName.Create("Lab 1"), LearningSpaceType.Create("Classroom"), Capacity.Create(20),
                Size.Create(10), Size.Create(10), Size.Create(10), Colors.Create("White"), Colors.Create("White"), Colors.Create("White")));

        permissionContextMock.Setup(p => p.HasPermission(It.IsAny<string>())).Returns(true);

        Services.AddSingleton(learningComponentServiceMock.Object);
        Services.AddSingleton(buildingServiceMock.Object);
        Services.AddSingleton(floorServiceMock.Object);
        Services.AddSingleton(learningSpaceServiceMock.Object);
        Services.AddSingleton(permissionContextMock.Object);

        // Act
        var wrapper = RenderWithPopoverLayout(1, 1, 1);
        var cut = wrapper.FindComponent<ListLearningComponentId>();

        // Assert
        cut.WaitForAssertion(() =>
        {
            cut.Markup.Should().Contain("No hay elementos para mostrar.");
        });
    }

    /// <summary>
    /// Verifies that the page displays a table when learning components are available.
    /// </summary>
    [Fact]
    public async Task PageRendersTableWithComponents()
    {
        // Arrange
        var componentList = new List<LearningComponent>
        {
            new Projector("content", Area2D.Create(2,2), Orientation.Create("North"), Coordinates.Create(1, 2, 3), Dimension.Create(1, 2, 3)),
            new Whiteboard(Colors.Create("Red"), Orientation.Create("West"), Coordinates.Create(1, 2, 3), Dimension.Create(1, 2, 3))
        };

        var paginated = new PaginatedList<LearningComponent>(componentList, componentList.Count, 10, 0);

        var learningComponentServiceMock = new Mock<ILearningComponentServices>();
        var buildingServiceMock = new Mock<IBuildingsServices>();
        var floorServiceMock = new Mock<IFloorServices>();
        var learningSpaceServiceMock = new Mock<ILearningSpaceServices>();
        var permissionContextMock = new Mock<IPermissionContext>();

        learningComponentServiceMock
            .Setup(s => s.GetLearningComponentsByIdAsync(1, 10, 0, It.IsAny<string>()))
            .ReturnsAsync(paginated);

        buildingServiceMock
            .Setup(s => s.DisplayBuildingAsync(1))
            .ReturnsAsync(new Building(EntityName.Create("Building A"), Coordinates.Create(1, 1, 1), Dimension.Create(1, 1, 10),
                Colors.Create("White"), EntityName.Create("Area")));

        floorServiceMock
            .Setup(s => s.GetFloorsListAsync(1))
            .ReturnsAsync(new List<Floor> { new Floor(1, FloorNumber.Create(1)) });

        learningSpaceServiceMock
            .Setup(s => s.GetLearningSpaceAsync(1))
            .ReturnsAsync(new LearningSpace(EntityName.Create("Lab 1"), LearningSpaceType.Create("Classroom"), Capacity.Create(20),
                Size.Create(10), Size.Create(10), Size.Create(10), Colors.Create("White"), Colors.Create("White"), Colors.Create("White")));

        permissionContextMock.Setup(p => p.HasPermission(It.IsAny<string>())).Returns(true);

        Services.AddSingleton(learningComponentServiceMock.Object);
        Services.AddSingleton(buildingServiceMock.Object);
        Services.AddSingleton(floorServiceMock.Object);
        Services.AddSingleton(learningSpaceServiceMock.Object);
        Services.AddSingleton(permissionContextMock.Object);

        // Act
        var wrapper = RenderWithPopoverLayout(1, 1, 1);
        var cut = wrapper.FindComponent<ListLearningComponentId>();

        cut.WaitForAssertion(() =>
        {
            cut.FindComponent<MudTable<LearningComponent>>().Should().NotBeNull();
        }, timeout: TimeSpan.FromSeconds(2));

        // Assert
        cut.Markup.Should().Contain("PROJ-");
        cut.Markup.Should().Contain("WB-");
    }

    /// <summary>
    /// Verifies that clicking the add button navigates to the correct page.
    /// </summary>
    [Fact]
    public void ClickingAddButton_ShouldNavigateToAddPage()
    {
        // Arrange
        var permissionContextMock = new Mock<IPermissionContext>();
        permissionContextMock.Setup(p => p.HasPermission("List Components")).Returns(true);
        permissionContextMock.Setup(p => p.HasPermission("Create Components")).Returns(true);

        var floorServiceMock = new Mock<IFloorServices>();
        floorServiceMock.Setup(f => f.GetFloorsListAsync(1))
            .ReturnsAsync(new List<Floor> { new Floor(1, FloorNumber.Create(1)) });

        var buildingServiceMock = new Mock<IBuildingsServices>();
        buildingServiceMock.Setup(b => b.DisplayBuildingAsync(1))
            .ReturnsAsync(new Building(EntityName.Create("Edificio Test"), Coordinates.Create(0, 0, 0), Dimension.Create(10, 10, 10),
                Colors.Create("Blue"), EntityName.Create("Área")));

        var learningSpaceServiceMock = new Mock<ILearningSpaceServices>();
        learningSpaceServiceMock.Setup(l => l.GetLearningSpaceAsync(1))
            .ReturnsAsync(new LearningSpace(EntityName.Create("Espacio A"), LearningSpaceType.Create("Classroom"), Capacity.Create(30),
                Size.Create(5), Size.Create(5), Size.Create(3), Colors.Create("White"), Colors.Create("White"), Colors.Create("White")));

        var learningComponentServiceMock = new Mock<ILearningComponentServices>();
        learningComponentServiceMock.Setup(s => s.GetLearningComponentsByIdAsync(1, 10, 0, It.IsAny<string>()))
            .ReturnsAsync(new PaginatedList<LearningComponent>(new List<LearningComponent>(), 0, 10, 0));

        Services.AddSingleton(learningComponentServiceMock.Object);
        Services.AddSingleton(permissionContextMock.Object);
        Services.AddSingleton(floorServiceMock.Object);
        Services.AddSingleton(buildingServiceMock.Object);
        Services.AddSingleton(learningSpaceServiceMock.Object);

        var navMan = Services.GetRequiredService<NavigationManager>() as FakeNavigationManager;

        // Act
        var wrapper = RenderWithPopoverLayout(1, 1, 1);
        var cut = wrapper.FindComponent<ListLearningComponentId>();

        var addButton = cut.FindAll("button").FirstOrDefault(b => b.TextContent.Contains("Agregar"));
        addButton?.Click();

        // Assert
        navMan!.Uri.Should().Contain("/edificios/1/pisos/1/espacios-de-aprendizaje/1/listar-componentes/agregar-componente");
    }


    /// <summary>
    /// Verifies that the TranslateOrientation method returns the correct translation for a given orientation.
    /// </summary>
    [Fact]
    public void Orientation_ShouldBeTranslatedCorrectly()
    {
        // Arrange
        var projector = new Projector("content", Area2D.Create(2, 2),
            Orientation.Create("North"), Coordinates.Create(1, 2, 3), Dimension.Create(1, 2, 3));
        var translated = new ListLearningComponentId().GetType()
            .GetMethod("TranslateOrientation", System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance)!
            .Invoke(new ListLearningComponentId(), new object[] { projector.Orientation.Value });

        // Assert
        translated.Should().Be("Norte");
    }


    /// <summary>
    /// Helper method to render the component under a MudPopoverProvider layout.
    /// </summary>
    private IRenderedComponent<PopoverLayout> RenderWithPopoverLayout(int buildingId, int floorId, int learningSpaceId)
    {
        return RenderComponent<PopoverLayout>(parameters => parameters
            .AddChildContent<ListLearningComponentId>(childParams => childParams
                .Add(p => p.buildingId, buildingId)
                .Add(p => p.floorId, floorId)
                .Add(p => p.learningSpaceId, learningSpaceId)
            ));
    }

    /// <summary>
    /// Wrapper layout component that provides a MudPopoverProvider for testing purposes.
    /// </summary>
    public class PopoverLayout : ComponentBase
    {
        [Parameter] public RenderFragment? ChildContent { get; set; }

        protected override void BuildRenderTree(RenderTreeBuilder builder)
        {
            builder.OpenComponent<MudPopoverProvider>(0);
            builder.CloseComponent();

            builder.AddContent(1, ChildContent);
        }
    }
}
