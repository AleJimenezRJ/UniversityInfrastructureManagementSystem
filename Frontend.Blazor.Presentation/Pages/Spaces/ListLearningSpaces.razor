@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Kiota.Abstractions
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Application.Services
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.Entities.Spaces
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.ValueObjects
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.Exceptions
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Presentation.Components
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Presentation.Components.Spaces
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.Dtos.Spaces
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using System.Collections
@using System.Net

@attribute [Authorize]
@inject IBuildingsServices BuildingService
@inject IFloorServices FloorService
@inject ILearningSpaceServices LearningSpaceService
@inject NavigationManager Navigation
@inject IPermissionContext PermissionContext

@page "/edificios/{buildingId:int}/pisos/{floorId:int}/espacios-de-aprendizaje"

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-0">
    <div style="overflow-x: auto; overflow-y: auto; padding: 1rem; padding-bottom: 80px;">
        <MudBreadcrumbs Items="_items">
            <ItemTemplate Context="item">
                @if (item.Disabled)
                {
                    <MudText Typo="Typo.subtitle2">@item.Text.ToUpper()</MudText>
                }
                else
                {
                    <MudLink Href="@item.Href">@item.Text.ToUpper()</MudLink>
                }
            </ItemTemplate>
        </MudBreadcrumbs>
        <PageTitle>Administración de Espacios de Aprendizaje</PageTitle>

        <h1 class="text-h1">
            Administración de Espacios de Aprendizaje
        </h1>
        <div style="display: flex; justify-content: space-between; align-items: center; flex-wrap: wrap; gap: 1rem; width: 100%; margin-bottom: 1.5rem;">
            
            <MudText Typo="Typo.subtitle1" Style="color: #204c6f;">
                <strong>Edificio:</strong> @_buildingName<br />
                <strong>Piso:</strong> @_floorNumber
            </MudText>

            <div class="d-flex gap-2">
                <div class="cancel-wrapper">
                  <AuthorizeView Policy="View Audit">
                        <Authorized>
                            <CustomButton ButtonType="cancel" Variant="Variant.Outlined" OnClick="@OnViewLearningSpacesAuditClicked">
                                BITÁCORA
                            </CustomButton>
                        </Authorized>
                  </AuthorizeView>
                </div>

                <div style="flex: 1; display: flex; justify-content: flex-end;">
                  
                 <AuthorizeView Policy="Create Learning Space">
                     <Authorized>
                        <CustomButton ButtonType="add" OnClick="AddLearningSpace">
                            Agregar
                        </CustomButton>
                    </Authorized>
                 </AuthorizeView>
                </div>
            </div> 

        </div>

        @if (_isLoading)
        {
            <Spinner />
        }
        else if (_invalidBuilding || _invalidFloor || _errorLearningSpaceList)
        {
            <MudAlert Severity="@(UserMessageSeverity)" Class="mb-4">@UserMessage</MudAlert>
            <div class="button-container mt-4">
                <CustomButton ButtonType="cancel"
                              Variant="Variant.Outlined"
                              OnClick="@GoBack">
                    ATRÁS
                </CustomButton>
            </div>
        }
        else
        {
            <div class="table-container" style="overflow-x: auto; width: 100%;">
                <ElegantSearchBar OnSearch="OnSearchLearningSpaces" Placeholder="Buscar espacios de aprendizaje por nombre o tipo."/>
                <MudTable ServerData="ServerReload" @ref="_table"
                          Elevation="1"
                          RowsPerPage="10"
                          Hover="true"
                          Bordered="true"
                          Striped="true"
                          Style="min-width: 650px; white-space: nowrap; table-layout: fixed; margin-top: 1rem;"
                          FixedHeader="true"
                          Dense="true"
                          CustomHeader="true"
                          Breakpoint="Breakpoint.None"
                          HeaderClass="mud-table-sticky-header">
                    <HeaderContent>
                        <MudTh class="no-wrap"><span class="text-body fw-bold">Nombre</span></MudTh>
                        <MudTh class="no-wrap"><span class="text-body fw-bold">Tipo</span></MudTh>
                        <MudTh class="no-wrap"><span class="text-body fw-bold">Componentes de Aprendizaje</span></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd class="no-wrap text-body">
                            <MudLink Href="@($"/edificios/{buildingId}/pisos/{floorId}/espacios-de-aprendizaje/{context.LearningSpaceId}")">
                                @context.Name
                            </MudLink>
                        </MudTd>
                        <MudTd class="no-wrap text-body">@context.Type</MudTd>
                        <MudTd class="no-wrap text-body">
                            <MudLink Href="@($"/edificios/{buildingId}/pisos/{floorId}/espacios-de-aprendizaje/{context.LearningSpaceId}/listar-componentes")">
                                Ver
                            </MudLink>
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText Class="text-h3"> No hay elementos para mostrar. </MudText>
                    </NoRecordsContent>
                    <PagerContent>
                        <TablePager/>
                    </PagerContent>
                </MudTable>
            </div>
            @if (!string.IsNullOrEmpty(UserMessage))
            {
                <MudAlert Severity="@(UserMessageSeverity)" Class="mt-4">@UserMessage</MudAlert>
            }
        }
    </div> <!-- Cierre añadido para el div principal -->
</MudContainer>

<style>
    .table-container {
        max-width: 100%;
        margin: 0;
        padding: 0;
    }
</style>

@code {

    /// <summary>
    /// Breadcrumb items for navigation.
    /// </summary>
    private List<BreadcrumbItem> _items = new();

    protected override void OnParametersSet()
    {
        _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("INICIO", href: "/"),
            new BreadcrumbItem("EDIFICIOS", href: "/edificios"),
            new BreadcrumbItem("PISOS", href: $"/edificios/{buildingId}/pisos"),
            new BreadcrumbItem("ESPACIOS DE APRENDIZAJE", href: $"/edificios/{buildingId}/pisos/{floorId}/espacios-de-aprendizaje"),
        };
    }

    // Parameters

    // Reference to the table
    private MudTable<LearningSpaceOverviewDto> _table;

    /// <summary>
    /// Building ID to display the learning spaces.
    /// </summary>
    [Parameter]
    public int buildingId { get; set; }

    /// <summary>
    /// Flor ID to display the learning spaces.
    /// </summary>
    [Parameter]
    public int floorId { get; set; }

    /// <summary>
    /// Name of the building to display in the UI.
    /// </summary>
    private string _buildingName = string.Empty;

    /// <summary>
    /// Floor number to display in the UI.
    /// </summary>
    private int _floorNumber;

    /// <summary>
    /// List of floors in the building.
    /// </summary>
    private PaginatedList<LearningSpaceOverviewDto>? _learningSpaceList;

    /// <summary>
    /// The total amount of learning spaces in the current floor.
    /// </summary>
    private int _totalItems;

    /// <summary>
    /// Represents the text used for filtering learning spaces in the table by name or type.
    /// </summary>
    private string _searchText = string.Empty;

    //FLAGS

    /// summary
    /// Flag to indicate that the current building is invalid or doesn't exist'
    /// </summary>
    private bool _invalidBuilding = false;

    /// summary
    /// Flag to indicate that the current floor is invalid or doesn't exist'
    /// </summary>
    private bool _invalidFloor = false;

    /// <summary>
    /// Error flag to indicate if there was an issue loading the learning spaces list.
    /// </summary>
    private bool _errorLearningSpaceList = false;

    /// <summary>
    /// Flag to indicate if the page is loading data.
    /// </summary>
    private bool _isLoading = true;

    /// <summary>
    /// User message to display in the UI.
    /// </summary>
    private string UserMessage = string.Empty;

    /// <summary>
    /// User message severity to display in the UI.
    /// </summary>
    private Severity UserMessageSeverity = Severity.Info;

    /// <summary>
    /// Redirects to the list of learning spaces for the current building and floor.
    /// </summary>
    private void AddLearningSpace()
    {
        Navigation.NavigateTo($"/edificios/{buildingId}/pisos/{floorId}/espacios-de-aprendizaje/crear");
    }

    private void GoBack()
    {
        if (_invalidBuilding)
        {
            Navigation.NavigateTo("/edificios");
        }
        else
        {
            Navigation.NavigateTo($"/edificios/{buildingId}/pisos");
        }
    }

    private void OnViewLearningSpacesAuditClicked()
    {
        Navigation.NavigateTo($"/edificios/{buildingId}/pisos/{floorId}/espacios-de-aprendizaje/bitacora");
    }

    /// <summary>
    /// Initializes the component by loading the building and floors data.
    /// </summary>
    /// <returns>
    /// A task that represents the asynchronous operation.
    /// </returns>
    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        bool buildingLoaded = false;

        bool floorLoaded = false;
        try
        {
            // Initialize the loading state
            // Requests the building name and floors list
            var building = await BuildingService.DisplayBuildingAsync(this.buildingId);

            if (building is null || string.IsNullOrWhiteSpace(building?.Name?.Name))
            {
                UserMessage = "No se encontró el edificio solicitado. Por favor, verifique la URL o contacte al administrador.";
                UserMessageSeverity = Severity.Error;
                _invalidBuilding = true;
                return;
            }

            _buildingName = building.Name.Name;
            _invalidBuilding = false;
            buildingLoaded = true;

            var floorList = await FloorService.GetFloorsListAsync(this.buildingId);

            if (floorList is null || !floorList.Any(f => f.FloorId == this.floorId))
            {
                UserMessage = "No se encontró el piso solicitado. Por favor, verifique la URL o contacte al administrador.";
                UserMessageSeverity = Severity.Error;
                _invalidFloor = true;
                return;
            }

            _floorNumber = floorList.FirstOrDefault(f => f.FloorId == this.floorId)!.Number.Value;
            _invalidFloor = false;
            floorLoaded = true;
        }
        catch (DomainException)
        {
            if (!buildingLoaded)
            {
                this.UserMessage = "Ocurrió un error al cargar la información del edificio.";
                _invalidBuilding = true;
            }
            else if (!floorLoaded)
            {
                this.UserMessage = "Ocurrió un error al cargar los pisos del edificio.";
                _invalidFloor = true;
            }
            else
            {
                this.UserMessage = "Ocurrió un error al cargar los espacios de aprendizaje.";
                _errorLearningSpaceList = true;
            }
            this.UserMessageSeverity = Severity.Error;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task OnSearchLearningSpaces(string searchText)
    {
        _searchText = searchText;

        await RefreshTableData();
  
    }

    private async Task RefreshTableData()
    {
        await _table.ReloadServerData();
    }


    private async Task<TableData<LearningSpaceOverviewDto>> ServerReload(TableState state, CancellationToken token)
    {
        try
        {
            _learningSpaceList = await LearningSpaceService.GetLearningSpacesListPaginatedAsync(floorId, state.PageSize, state.Page, _searchText);

            if (_learningSpaceList is null)
            {
                UserMessage = "Ocurrió un error al cargar los espacios de aprendizaje para el piso seleccionado.";
                UserMessageSeverity = Severity.Error;
                _errorLearningSpaceList = true;
                return emptyTable(state, token);
            }

            _totalItems = _learningSpaceList!.TotalCount;

            return new TableData<LearningSpaceOverviewDto>() { TotalItems = _totalItems, Items = _learningSpaceList};
        }
        catch (DomainException)
        {
            this.UserMessage = "Ocurrió un error al cargar los espacios de aprendizaje.";
            _errorLearningSpaceList = true;
            this.UserMessageSeverity = Severity.Error;
            return emptyTable(state, token);
        }
        finally
        {
            _isLoading = false;
        }
    }

    /// <summary>
	/// This method retrieves an empty table data to be used when there are no learning spaces available or an error occurs.
	/// </summary>
	/// <param name="state">The current state of the table</param>
	/// <param name="token">The cancelation token</param>
	/// <returns>An empty table of the context type</returns>
	private TableData<LearningSpaceOverviewDto> emptyTable(TableState state, CancellationToken token)
    {
        return new TableData<LearningSpaceOverviewDto>()
            {
                TotalItems = 0,
                Items = PaginatedList<LearningSpaceOverviewDto>.Empty(state.PageSize, state.Page)
            };
    }
}
