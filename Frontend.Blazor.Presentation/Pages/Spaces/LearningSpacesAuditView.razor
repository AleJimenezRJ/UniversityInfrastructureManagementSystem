@page "/edificios/{buildingId:int}/pisos/{floorId:int}/espacios-de-aprendizaje/bitacora"
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Application.Services
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.Exceptions
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Presentation.Components
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.Entities.Spaces
@using MudBlazor

@inject IBuildingsServices BuildingService
@inject IFloorServices FloorService
@inject ILearningSpaceLogServices LearningSpaceLogService
@inject NavigationManager NavManager

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-0">
    <div style="overflow-x: auto; overflow-y: auto; padding: 1rem; padding-bottom: 80px;">
        <MudBreadcrumbs Items="_items">
            <ItemTemplate Context="item">
                @if (item.Disabled)
                {
                    <MudText Typo="Typo.subtitle2">@item.Text.ToUpper()</MudText>
                }
                else
                {
                    <MudLink Href="@item.Href">@item.Text.ToUpper()</MudLink>
                }
            </ItemTemplate>
        </MudBreadcrumbs>

        <h1 class="text-h1">
            <h3 class="text-h1">Historial de Auditoría de Espacios de Aprendizaje</h3>
        </h1>

        @if (!_initialLoadComplete)
        {
            <Spinner />
        }
        else if (_invalidBuilding || _invalidFloor || _errorLearningSpaceLogsList)
        {
            <MudAlert Severity="@(UserMessageSeverity)" Class="mb-4">@UserMessage</MudAlert>
            <div class="button-container mt-4">
                <CustomButton ButtonType="cancel"
                              Variant="Variant.Outlined"
                              OnClick="@GoBack">
                    ATRÁS
                </CustomButton>
            </div>
        }
        else
        {
            <div class="table-container" style="overflow-x: auto; width: 100%;">
                <MudTable T="LearningSpaceLog"
                        Items="_learningSpaceLogs"
                        Elevation="1"
                        Style="min-width: 650px; white-space: nowrap; table-layout: fixed;"
                        Hover="true"
                        Bordered="true"
                        Striped="true"
                        FixedHeader="true"
                        Dense="true"
                        CustomHeader="true"
                        Breakpoint="Breakpoint.None"
                        Class="mt-4"
                        RowsPerPage="@RowsPerPage"
                        ForceServerData="true"
                        RowsPerPageOptions="@RowsPerPageOptions">
                    <HeaderContent>
                        <MudTh class="no-wrap"><span class="text-h3">Nombre</span></MudTh>
                        <MudTh class="no-wrap"><span class="text-h3">Tipo</span></MudTh>
                        <MudTh class="no-wrap"><span class="text-h3">Capacidad Máxima</span></MudTh>
                        <MudTh class="no-wrap"><span class="text-h3">Dimensiones (A×L×H)</span></MudTh>
                        <MudTh class="no-wrap"><span class="text-h3">Color Piso</span></MudTh>
                        <MudTh class="no-wrap"><span class="text-h3">Color Paredes</span></MudTh>
                        <MudTh class="no-wrap"><span class="text-h3">Color Techo</span></MudTh>
                        <MudTh class="no-wrap"><span class="text-h3">Acción</span></MudTh>
                        <MudTh class="no-wrap"><span class="text-h3">Modificación</span></MudTh>
                    </HeaderContent>

                    <RowTemplate Context="context">
                        <MudTd class="text-body no-wrap">@context.Name</MudTd>
                        <MudTd class="text-body no-wrap">@context.Type</MudTd>
                        <MudTd class="text-body no-wrap">@context.MaxCapacity</MudTd>
                        <MudTd class="text-body no-wrap">@context.Width×@context.Length×@context.Height m</MudTd>
                        <MudTd class="text-body no-wrap">@TranslateColor(context.ColorFloor)</MudTd>
                        <MudTd class="text-body no-wrap">@TranslateColor(context.ColorWalls)</MudTd>
                        <MudTd class="text-body no-wrap">@TranslateColor(context.ColorCeiling)</MudTd>
                        <MudTd class="text-body no-wrap">@TranslateAction(context.Action)</MudTd>
                        <MudTd class="text-body no-wrap">@context.ModifiedAt.ToString("dd/MM/yyyy HH:mm")</MudTd>
                    </RowTemplate>

                    <NoRecordsContent>
                        <MudText Class="text-h3"> No hay elementos para mostrar. </MudText>
                    </NoRecordsContent>
                    
                    <PagerContent>
                        <TablePager />
                    </PagerContent>

                </MudTable>
            </div>
            @if (!string.IsNullOrEmpty(UserMessage))
            {
                <MudAlert Severity="@(UserMessageSeverity)" Class="mt-4">@UserMessage</MudAlert>
            } 
            else 
            {
                <div class="d-flex justify-content-start mt-3 ms-1">
                    <CustomButton ButtonType="cancel"
                                  Variant="Variant.Outlined"
                                  OnClick="NavigateBack">
                        ATRÁS
                    </CustomButton>
                </div>
            }
        }
    </div>
</MudContainer>

@code {

    /// <summary>
    /// The ID of the building to display the learning spaces audit for.
    /// </summary>
    [Parameter]
    public int buildingId { get; set; }

    [Parameter]
    public int floorId { get; set; }

    /// <summary>
    /// Name of the building to display in the UI.
    /// </summary>
    private string _buildingName = string.Empty;

    /// <summary>
    /// Floor number to display in the UI.
    /// </summary>
    private int _floorNumber;

    /// summary
    /// Flag to indicate that the current building is invalid or doesn't exist'
    /// </summary>
    private bool _invalidBuilding = false;

    /// summary
    /// Flag to indicate that the current floor is invalid or doesn't exist'
    /// </summary>
    private bool _invalidFloor = false;

    /// <summary>
    /// Error flag to indicate if there was an issue loading the learning spaces list.
    /// </summary>
    private bool _errorLearningSpaceLogsList = false;

    /// <summary>
    /// User message to display in the UI.
    /// </summary>
    private string UserMessage = string.Empty;

    /// <summary>
    /// User message severity to display in the UI.
    /// </summary>
    private Severity UserMessageSeverity = Severity.Info;

    /// <summary>
    /// Number of rows to display per page in the table.
    /// </summary>
    public int RowsPerPage { get; set; } = 10;

    /// <summary>
    /// Options for the number of rows to display per page in the table.
    /// </summary>
    public int[] RowsPerPageOptions { get; set; } = new[] { 5, 10, 15, 20 };

    /// <summary>
    /// Flag to indicate if the initial load of the component is complete.
    /// </summary>
    private bool _initialLoadComplete;

    /// <summary>
    /// List of learning space logs to display in the table.
    /// </summary>
    private List<LearningSpaceLog> _learningSpaceLogs = new();

    /// <summary>
    /// Breadcrumb items for navigation.
    /// </summary>
    private List<BreadcrumbItem> _items;

    /// <summary>
    /// A dictionary to translate action names from English to Spanish.
    /// </summary>
    private readonly Dictionary<string, string> _actionTranslations = new()
    {
        { "CREATED", "CREADO" },
        { "UPDATED", "ACTUALIZADO" },
        { "DELETED", "ELIMINADO" }
    };

    /// <summary>
    /// A dictionary to translate color names from English to Spanish.
    /// </summary>
    private readonly Dictionary<string, string> _colorTranslations = new()
    {
        { "Red", "Rojo" },
        { "Green", "Verde" },
        { "Blue", "Azul" },
        { "Yellow", "Amarillo" },
        { "Black", "Negro" },
        { "White", "Blanco" },
        { "Orange", "Naranja" },
        { "Purple", "Púrpura" },
        { "Gray", "Gris" },
        { "Brown", "Café" },
        { "Pink", "Rosado" },
        { "Cyan", "Cian" },
        { "Magenta", "Magenta" },
        { "Lime", "Lima" },
        { "Teal", "Turquesa" },
        { "Olive", "Olivo" },
        { "Navy", "Azul Marino" },
        { "Maroon", "Granate" },
        { "Silver", "Plata" },
        { "Gold", "Dorado" }
    };
    
    /// <summary>
    /// Sets the breadcrumb items for navigation when the parameters are set.
    /// </summary>
    protected override void OnParametersSet()
    {
        _items = new List<BreadcrumbItem>
        {
            new BreadcrumbItem("INICIO", href: "/"),
            new BreadcrumbItem("EDIFICIOS", href: "/edificios"),
            new BreadcrumbItem("PISOS", href: $"/edificios/{buildingId}/pisos"),
            new BreadcrumbItem("ESPACIOS DE APRENDIZAJE", href: $"/edificios/{buildingId}/pisos/{floorId}/espacios-de-aprendizaje"),
            new BreadcrumbItem("HISTORIAL DE AUDITORÍA", href: $"/edificios/{buildingId}/pisos/{floorId}/espacios-de-aprendizaje/bitacora")
        };
    }

    /// <summary>
    /// Initializes the component and loads the learning space logs.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        await LoadLearningSpaceLogs();
        _initialLoadComplete = true;
        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// Loads the learning space logs for the specified building and floor.
    /// </summary>
    private async Task LoadLearningSpaceLogs()
    {
        bool buildingLoaded = false;

        bool floorLoaded = false;

        try
        {
            // Initialize the loading state
            // Requests the building name and floors list
            var building = await BuildingService.DisplayBuildingAsync(this.buildingId);

            if (building is null || string.IsNullOrWhiteSpace(building?.Name?.Name))
            {
                UserMessage = "No se encontró el edificio solicitado. Por favor, verifique la URL o contacte al administrador.";
                UserMessageSeverity = Severity.Error;
                _invalidBuilding = true;
                return;
            }

            _buildingName = building.Name.Name;
            _invalidBuilding = false;
            buildingLoaded = true;

            var floorList = await FloorService.GetFloorsListAsync(this.buildingId);

            if (floorList is null || !floorList.Any(f => f.FloorId == this.floorId))
            {
                UserMessage = "No se encontró el piso solicitado. Por favor, verifique la URL o contacte al administrador.";
                UserMessageSeverity = Severity.Error;
                _invalidFloor = true;
                return;
            }

            _floorNumber = floorList.FirstOrDefault(f => f.FloorId == this.floorId)!.Number.Value;
            _invalidFloor = false;
            floorLoaded = true;

            _learningSpaceLogs = await LearningSpaceLogService.ListLearningSpaceLogsAsync();
        }
        catch (DomainException)
        {
            _learningSpaceLogs = new List<LearningSpaceLog>();
            if (!buildingLoaded)
            {
                this.UserMessage = "Ocurrió un error al cargar la información del edificio.";
                _invalidBuilding = true;
            }
            else if (!floorLoaded)
            {
                this.UserMessage = "Ocurrió un error al cargar los pisos del edificio.";
                _invalidFloor = true;
            }
            else
            {
                this.UserMessage = "Ocurrió un error al cargar la bitácora de espacios de aprendizaje.";
                _errorLearningSpaceLogsList = true;
            }
            this.UserMessageSeverity = Severity.Error;
        }
    }

    /// <summary>
    /// Navigates back to the previous page.
    /// </summary>
    private void NavigateBack()
    {
        NavManager.NavigateTo($"/edificios/{buildingId}/pisos/{floorId}/espacios-de-aprendizaje");
    }

    /// <summary>
    /// Translates the action name from English to Spanish.
    /// </summary>
    private string TranslateAction(string action)
        => _actionTranslations.TryGetValue(action, out var translated) ? translated : action;

    /// <summary>
    /// Translates the color name from English to Spanish.
    /// </summary>
    private string TranslateColor(string color)
        => _colorTranslations.TryGetValue(color, out var translated) ? translated : color;

    /// <summary>
    /// Navigates back to the previous page based on the building and floor context.
    /// </summary>
    private void GoBack()
    {
        if (_invalidBuilding)
        {
            NavManager.NavigateTo("/edificios");
        }
        else
        {
            NavManager.NavigateTo($"/edificios/{buildingId}/pisos");
        }
    }
}
