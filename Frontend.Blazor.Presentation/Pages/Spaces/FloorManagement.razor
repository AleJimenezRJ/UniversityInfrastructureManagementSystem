@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.Kiota.Abstractions
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Application.Services
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.Entities.Spaces
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.ValueObjects
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.Exceptions
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Presentation.Components
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Presentation.Components.Spaces
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.Dtos.Spaces
@using Microsoft.AspNetCore.Authorization
@using MudBlazor
@using System.Collections
@using System.Net

@attribute [Authorize]
@inject IBuildingsServices BuildingService
@inject IFloorServices FloorService
@inject ILearningSpaceServices LearningSpaceService
@inject NavigationManager Navigation
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IPermissionContext PermissionContext

@page "/edificios/{buildingId:int}/pisos"

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-0">
    <div style="overflow-x: auto; overflow-y: auto; padding: 1rem; padding-bottom: 80px;">
        <MudBreadcrumbs Items="_items">
            <ItemTemplate Context="item">
                @if (item.Disabled)
                {
                    <MudText Typo="Typo.subtitle2">@item.Text.ToUpper()</MudText>
                }
                else
                {
                    <MudLink Href="@item.Href">@item.Text.ToUpper()</MudLink>
                }
            </ItemTemplate>
        </MudBreadcrumbs>

        <PageTitle>Administración de Pisos</PageTitle>

        <h1 class="text-h1">
            Administración de Pisos
        </h1>
        <div style="display: flex; 
                    justify-content: space-between; 
                    align-items: flex-start;
                    flex-wrap: wrap; 
                    gap: 1rem; 
                    width: 100%; 
                    margin-bottom: 1rem;">
            @if (!_isLoading && !_error)
            {
                <MudText Typo="Typo.subtitle1" Style="color: #204c6f;">
                    <strong>Edificio:</strong> @_buildingName
                </MudText>
                
                     <AuthorizeView Policy="Create Floors">
                        <Authorized>
                            <CustomButton ButtonType="add" OnClick="AddFloor">
                                Agregar
                            </CustomButton>
                        </Authorized>
                    </AuthorizeView>
            }
        </div>

        @if (_isLoading)
        {
            <Spinner />
        }
        else if(_error)
        {
            <MudAlert Severity="@(UserMessageSeverity)" Class="mb-4">@UserMessage</MudAlert>
            <div class="button-container mt-4">
                            <CustomButton ButtonType="cancel"
                                              Variant="Variant.Outlined"
                                              OnClick="@GoBuildings">
                                ATRÁS
                            </CustomButton>
            </div>          
        }
        else
        {
            <div class="table-container" style="overflow-x: auto; width: 100%;">
                <MudTable ServerData="ServerReload" @ref="_table"
                          Elevation="1"
                          RowsPerPage="10"
                          Hover="true"
                          Bordered="true"
                          Striped="true"
                          Style="min-width: 650px; white-space: nowrap; table-layout: fixed;"
                          FixedHeader="true"
                          Dense="true"
                          CustomHeader="true"
                          Breakpoint="Breakpoint.None"
                          HeaderClass="mud-table-sticky-header">
                    <HeaderContent>
                        <MudTh class="no-wrap"><span class="text-body fw-bold">Número</span></MudTh>
                        <MudTh class="no-wrap"><span class="text-body fw-bold">Cantidad de Espacios de Aprendizaje</span></MudTh>
                         <AuthorizeView Policy="Delete Floors">
                            <Authorized Context="authContext">
                                <MudTh class="no-wrap"><span class="text-body fw-bold">Eliminar Piso</span></MudTh>
                            </Authorized>
                        </AuthorizeView>
                        <MudTh class="no-wrap"><span class="text-body fw-bold">Espacios de Aprendizaje</span></MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd class="no-wrap text-body">@context.Number.Value</MudTd>
                        <MudTd class="no-wrap text-body">
                            @_learningSpaceCounts.GetValueOrDefault(context.FloorId, 0)
                        </MudTd>

                        <AuthorizeView Policy="Delete Floors">
                            <Authorized Context="authContext">
                                <MudTd class="no-wrap text-body">
                                    <MudIconButton Icon="@Icons.Material.Outlined.Delete"
                                                   Style="color: #B14212;"
                                                   OnClick="@(() => OnDeleteClicked(context.FloorId))"
                                                   aria-label="Eliminar piso" />
                                </MudTd>
                            </Authorized>
                        </AuthorizeView>

                        <MudTd class="no-wrap text-body">
                            <MudLink Href="@($"/edificios/{buildingId}/pisos/{context.FloorId}/espacios-de-aprendizaje")">
                                Ver
                            </MudLink>
                        </MudTd>
                    </RowTemplate>
                    <NoRecordsContent>
                        <MudText Class="text-h3"> No hay elementos para mostrar. </MudText>
                    </NoRecordsContent>
                    <PagerContent>
                        <TablePager />
                    </PagerContent>
                </MudTable>
            </div>
            @if (!string.IsNullOrEmpty(UserMessage))
            {
                <MudAlert Severity="@(UserMessageSeverity)" Class="mt-4">@UserMessage</MudAlert>
            }
        }
    </div>
</MudContainer>

<style>
    .table-container {
        max-width: 100%;
        margin: 0;
        padding: 0;
    }
</style>


<ConfirmDialog @ref="DeleteDialog"
               Title="Confirmación"
               Message="¿Estás seguro de que deseas eliminar este usuario?"
               OkText="Eliminar"
               CancelText="Cancelar"
               ColorVarOk="--color-primary1" />

@code {
    // Parameters



    /// <summary>
    /// Building ID to display the learning spaces.
    /// </summary>
    [Parameter]
    public int buildingId { get; set; }

    /// <summary>
    /// Name of the building to display in the UI.
    /// </summary>
    private string _buildingName = string.Empty;

    /// <summary>
    /// Lists of floors and learning spaces.
    /// </summary>
    private PaginatedList<Floor>? _floorsList;

    // Reference to the table
    private MudTable<Floor> _table; 

    /// <summary>
    /// The total amount of floors in the current building.
    /// </summary>
    private int _totalItems;

    /// <summary>
    /// Learning space counts for each floor.
    /// </summary>
    private Dictionary<int, int> _learningSpaceCounts = new();

    /// <summary>
    /// Represents the first element in a paginated list.
    /// </summary>
    private const int _FirstElement = 1;

    /// <summary>
    /// Represents the first page in a paginated list.
    /// </summary>
    private const int _FirstPage = 0;

    /// <summary>
    /// Represents an empty search text to be used when no search is performed.
    /// </summary>
    private const string _emptySearchText = "";

    // Flags

    /// <summary>
    /// Flag to indicate if there was an error loading the data.
    /// </summary>
    private bool _error = false;

    /// <summary>
    /// Flag to indicate if the page is loading data.
    /// </summary>
    private bool _isLoading = true;

    /// <summary>
    /// User message to display in the UI.
    /// </summary>
    private string UserMessage = string.Empty;

    /// <summary>
    /// User message severity to display in the UI.
    /// </summary>
    private Severity UserMessageSeverity = Severity.Info;

    /// <summary>
    /// Breadcrumb items for navigation.
    /// </summary>
    private List<BreadcrumbItem> _items = new();

    private ConfirmDialog? DeleteDialog;

    protected override void OnParametersSet()
    {
        _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("INICIO", href: "/"),
        new BreadcrumbItem("EDIFICIOS", href: "/edificios"),
        new BreadcrumbItem("PISOS", href: $"/edificios/{buildingId}/pisos"),
    };
    }

    /// <summary>
    /// Navigates the user back to the buildings page.
    /// </summary>
    private void GoBuildings()
    {
        Navigation.NavigateTo($"/edificios/");
    }

    /// <summary>
    /// Deletes a floor by its ID.
    /// </summary>
    /// <param name="floorId">
    /// Floor ID to delete.
    /// </param>
    private async Task OnDeleteClicked(int floorId)
    {
        try
        {
            UserMessage = string.Empty;
            UserMessageSeverity = Severity.Info;

            bool confirmed = await DeleteDialog!.ShowAsync();

            if (!confirmed)
                return;

            await FloorService.DeleteFloorAsync(floorId);
            Snackbar.Add("¡El piso fue eliminado correctamente!", Severity.Success);
            await RefreshTableData();
            StateHasChanged();
        }
        catch (DomainException ex)
        {
            UserMessage = ex.Message;
            UserMessageSeverity = ex switch
            {
                ValidationException => Severity.Warning,
                DuplicatedEntityException => Severity.Error,
                NotFoundException => Severity.Error,
                _ => Severity.Error
            };
        }
        catch (Exception ex)
        {
            UserMessage = $"Ocurrió un error inesperado: {ex.Message}";
            UserMessageSeverity = Severity.Error;
        }
        StateHasChanged();
    }

    /// <summary>
    /// Adds a new floor to the building.
    /// </summary>
    private async Task AddFloor()
    {
        UserMessage = string.Empty;
        UserMessageSeverity = Severity.Info;
        try
        {
            await FloorService.CreateFloorAsync(buildingId);
            Snackbar.Add("¡El piso fue creado correctamente!", Severity.Success);
			await RefreshTableData();
            StateHasChanged();
        }
        catch (DomainException ex)
        {
            UserMessage = ex.Message;
            UserMessageSeverity = ex switch
            {
                ValidationException => Severity.Warning,
                DuplicatedEntityException => Severity.Error,
                NotFoundException => Severity.Error,
                _ => Severity.Error
            };
        }
        catch (Exception ex)
        {
            UserMessage = $"Ocurrió un error inesperado: {ex.Message}";
            UserMessageSeverity = Severity.Error;
        }
    }

    /// <summary>
    /// Initializes the component by loading the building and floors data.
    /// </summary>
    /// <returns>
    /// A task that represents the asynchronous operation.
    /// </returns>
    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Initialize the loading state
            // Requests the building name and floors list
            var building = await BuildingService.DisplayBuildingAsync(this.buildingId);

            if (building is null || string.IsNullOrWhiteSpace(building?.Name?.Name))
            {
                UserMessage = "No se encontró el edificio solicitado. Por favor, verifique la URL o contacte al administrador.";
                UserMessageSeverity = Severity.Error;
                _error = true;
                return;
            }

            _buildingName = building.Name.Name;
        }
        catch (DomainException ex)
        {
            UserMessage = ex.Message;
            _error = true;

            // Particular handling for specific exceptions
            UserMessageSeverity = ex switch
            {
                ValidationException => Severity.Warning,
                DuplicatedEntityException => Severity.Error,
                NotFoundException => Severity.Error,
                _ => Severity.Error
            };
        }
        finally
        {
            _isLoading = false;
        }
    }

    /// <summary>
    /// Loads the data again after deletion or adition of floors. Forces the table to fetch the most recet data from the server.
    /// </summary>
    private async Task RefreshTableData()
    {
        await _table.ReloadServerData();
    }

    private async Task<TableData<Floor>> ServerReload(TableState state, CancellationToken token)
    {
        _error = false;
        try
        {
            _floorsList = await FloorService.GetFloorsListPaginatedAsync(buildingId, state.PageSize, state.Page);

            if (_floorsList is not null)
            {
                _learningSpaceCounts.Clear();
                foreach (var floor in _floorsList)
                {
                    try
                    {
                        var spaces = await LearningSpaceService.GetLearningSpacesListPaginatedAsync(floor.FloorId, _FirstElement, _FirstPage, _emptySearchText);
                        _learningSpaceCounts[floor.FloorId] = spaces?.TotalCount ?? 0;
                    }
                    catch (NotFoundException)
                    {
                        _learningSpaceCounts[floor.FloorId] = 0;
                    }
                }
                _totalItems = _floorsList!.TotalCount;

                return new TableData<Floor>() { TotalItems = _totalItems, Items = _floorsList };
            }
			// If no floors are found, return an empty table
            return emptyTable(state, token);
        }
        catch (DomainException ex)
        {
            UserMessage = ex.Message;
            UserMessageSeverity = ex switch
            {
                ValidationException => Severity.Warning,
                DuplicatedEntityException => Severity.Error,
                NotFoundException => Severity.Error,
                _ => Severity.Error
            };
			return emptyTable(state, token);
        }
        catch (Exception ex)
        {
            UserMessage = $"Ocurrió un error inesperado: {ex.Message}";
            UserMessageSeverity = Severity.Error;
			return emptyTable(state, token);
        }
        finally
        {
            _isLoading = false;
        }
    }

    /// <summary>
    /// This method retrives an empty table data to be used when there are no floors available or an error occurs.
    /// </summary>
    /// <param name="state">The current state of the table</param>
    /// <param name="token">The cancelation token</param>
    /// <returns>An empty table of the context type</returns>
    private TableData<Floor> emptyTable(TableState state, CancellationToken token)
    {
        return new TableData<Floor>()
            {
                TotalItems = 0,
                Items = PaginatedList<Floor>.Empty(state.PageSize, state.Page)
            };
    }
}
