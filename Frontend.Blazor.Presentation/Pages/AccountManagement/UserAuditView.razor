@page "/user-audit"

@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Application.Services
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Application.Services.Implementations
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Presentation.Components
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.Entities.AccountManagement
@using Microsoft.AspNetCore.Authorization

@inject IUserAuditService UserAuditService
@inject NavigationManager NavManager
@attribute [Authorize(Policy = "View Audit")]

<Header />


<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-0">
    <div style="overflow-x: auto; overflow-y: auto; padding: 1rem; padding-bottom: 80px;">
        <MudBreadcrumbs Items="_items">
            <ItemTemplate Context="item">
                @if (item.Disabled)
                {
                    <MudText Typo="Typo.subtitle2">@item.Text.ToUpper()</MudText>
                }
                else
                {
                    <MudLink Href="@item.Href">@item.Text.ToUpper()</MudLink>
                }
            </ItemTemplate>
        </MudBreadcrumbs>

        

        <h1 class="text-h1">
            <h3 class="text-h1">Historial de Auditoría de Usuarios</h3>
        </h1>

        @if (!_initialLoadComplete)
        {
            <Spinner />
        }
        else
        {

            <div class="table-container" style="overflow-x: auto; width: 100%;">
                <MudTable T="UserAudit"
                ServerData="LoadAudits"
                Elevation="1"
                Style="min-width: 650px; white-space: nowrap; table-layout: fixed;"
                Hover="true"
                Bordered="true"
                Striped="true"
                FixedHeader="true"
                Dense="true"
                CustomHeader="true"
                Breakpoint="Breakpoint.None"
                Class="mt-4"
                RowsPerPage="@RowsPerPage"
                ForceServerData="true"
                RowsPerPageOptions="@RowsPerPageOptions">
                    <HeaderContent>
                        <MudTh class="no-wrap"><span class="text-h3">Usuario</span></MudTh>
                        <MudTh class="no-wrap"><span class="text-h3">Nombre Completo</span></MudTh>
                        <MudTh class="no-wrap"><span class="text-h3">Correo</span></MudTh>
                        <MudTh class="no-wrap"><span class="text-h3">Teléfono</span></MudTh>
                        <MudTh class="no-wrap"><span class="text-h3">Identidad</span></MudTh>
                        <MudTh class="no-wrap"><span class="text-h3">Acción</span></MudTh>
                        <MudTh class="no-wrap"><span class="text-h3">Modificación</span></MudTh>
                    </HeaderContent>

                    <RowTemplate Context="context">
                        <MudTd class="text-body no-wrap">@context.UserName</MudTd>
                        <MudTd class="text-body no-wrap">@context.FirstName @context.LastName</MudTd>
                        <MudTd class="text-body no-wrap">@context.Email</MudTd>
                        <MudTd class="text-body no-wrap">@context.Phone</MudTd>
                        <MudTd class="text-body no-wrap">@context.IdentityNumber</MudTd>
                        <MudTd class="text-body no-wrap">@context.Action</MudTd>
                        <MudTd class="text-body no-wrap">@context.ModifiedAt.ToString("dd/MM/yyyy HH:mm")</MudTd>
                    </RowTemplate>

                    <NoRecordsContent>
                        <MudText Class="text-h3"> No hay elementos para mostrar. </MudText>
                    </NoRecordsContent>


                    <PagerContent>
                        <TablePager />
                    </PagerContent>

                </MudTable>
            </div>
            <div class="d-flex justify-content-start mt-3 ms-1">
                <CustomButton ButtonType="cancel"
                Variant="Variant.Outlined"
                OnClick="NavigateToUserManagement">
                    ATRÁS
                </CustomButton>
            </div>
        }
    </div>
</MudContainer>

@code {
    [Parameter]
    public int RowsPerPage { get; set; } = 10;

    [Parameter]
    public int[] RowsPerPageOptions { get; set; } = new[] { 5, 10, 20, 50, 100 };

    /// <summary>
    ///  A flag to indicate if the initial data load is complete.
    /// </summary>
    private bool _initialLoadComplete;

    /// <summary>
    /// Tracks the last user ID for each page to support server-side pagination.
    /// </summary>
    private List<BreadcrumbItem> _items = new()
    {
        new BreadcrumbItem("HOME", href: "/"),
        new BreadcrumbItem("ADMINISTRACIÓN DE USUARIOS", href: "/user-management"),
        new BreadcrumbItem("HISTORIAL DE AUDITORÍA DE USUARIOS", href: "/user-audit")
    };

    /// <summary>
    /// A method that initializes the component and loads the initial data.
    /// </summary>
    /// <returns> A task representing the asynchronous operation.</returns>
    protected override async Task OnInitializedAsync()
    {
        if (!RowsPerPageOptions.Contains(RowsPerPage))
        {
            RowsPerPageOptions = RowsPerPageOptions.Append(RowsPerPage).ToArray();
        }

        await InvokeAsync(StateHasChanged);

        var initialState = new TableState { Page = 0, PageSize = RowsPerPage };
        await LoadAudits(initialState, new CancellationToken());

        _initialLoadComplete = true;

        await InvokeAsync(StateHasChanged);
    }

    /// <summary>
    /// A method that loads user audit data for the MudTable component.
    /// </summary>
    /// <param name="state"> The current state of the MudTable, including pagination and sorting information.</param>
    /// <param name="cancellationToken"> A cancellation token to cancel the operation if needed.</param>
    /// <returns> A task that represents the asynchronous operation, returning a TableData<UserAudit> containing the loaded data.</returns>
    private async Task<TableData<UserAudit>> LoadAudits(TableState state, CancellationToken cancellationToken)
    {

        try
        {
            int pageNumber = state.Page;
            int pageSize = state.PageSize;

            var paginated = await UserAuditService.GetPaginatedUserAuditAsync(pageSize, pageNumber);

            return new TableData<UserAudit>
            {
                Items = paginated.ToList(),
                TotalItems = paginated.TotalCount
            };
        }
        catch (Exception ex)
        {
            return new TableData<UserAudit>
            {
                Items = new List<UserAudit>(),
                TotalItems = 0
            };
        }
    }

    /// <summary>
    /// A method that navigates to the user management page.
    /// </summary>
    private void NavigateToUserManagement()
    {
        NavManager.NavigateTo("/user-management");
    }

}
