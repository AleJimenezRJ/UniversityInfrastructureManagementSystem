@page "/modify-user"

@using System.Text.RegularExpressions
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.Entities.AccountManagement
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Presentation.Components
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Application.Services
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Application.Services.Implementations
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.Entities
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.ValueObjects.AccountManagement
@using UCR.ECCI.PI.ThemePark.Frontend.Blazor.Domain.Exceptions
@using MudBlazor
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization

@attribute [Authorize(Policy = "Edit Users")]
@inject UserNavigationContext NavContext
@inject IUserWithPersonService UserWithPersonService
@inject NavigationManager NavManager
@inject IRoleService RoleService
@inject ISnackbar Snackbar

<Header />
<MudBreadcrumbs Items="_items">
    <ItemTemplate Context="item">
        @if (item.Disabled)
        {
            <MudText Typo="Typo.subtitle2">@item.Text.ToUpper()</MudText>
        }
        else
        {
            <MudLink Href="@item.Href">@item.Text.ToUpper()</MudLink>
        }
    </ItemTemplate>
</MudBreadcrumbs>

<h3 class="text-h1 mt-4 ms-3">Información de Usuario</h3>
<div style="padding-bottom: 150px;">
    <div style="background-color: #f5f5f5; min-height: auto; padding-top: 2rem; padding-bottom: 3rem;">
        @if (User is not null)
        {
            <MudContainer MaxWidth="MaxWidth.False">



                <MudPaper Class="mx-auto mt-4 px-6 py-4" Style="max-width: 1000px; border-radius: 8px;">
                    <MudGrid GutterSize="3">

                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="4" sm="3" Class="d-flex align-items-center">
                                    <MudText Class="text-h3 mb-2">Nombre:</MudText>
                                </MudItem>
                                <MudItem xs="8" sm="9">
                                    <MudTextField @bind-Value="User.FirstName"
                                    InputId="first-name-input"
                                    Variant="Variant.Filled"
                                    Dense="true"
                                    Style="width: 35%;" 
                                    OnBlur="ValidateFirstName"
                                    Error="@(!string.IsNullOrWhiteSpace(FirstNameError))"
                                    ErrorText="@FirstNameError" />
                                </MudItem>
                            </MudGrid>
                        </MudItem>

                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="4" sm="3" Class="d-flex align-items-center">
                                    <MudText Class="text-h3 mb-2">Apellido:</MudText>
                                </MudItem>
                                <MudItem xs="8" sm="9">
                                    <MudTextField @bind-Value="User.LastName"
                                    Variant="Variant.Filled"
                                    Dense="true"
                                    Style="width: 35%;"
                                    OnBlur="ValidateLastName"
                                    Error="@(!string.IsNullOrWhiteSpace(LastNameError))"
                                    ErrorText="@LastNameError" />
                                </MudItem>
                            </MudGrid>
                        </MudItem>


                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="4" sm="3" Class="d-flex align-items-center">
                                    <MudText Class="text-h3 mb-2">Número de identidad:</MudText>
                                </MudItem>
                                <MudItem xs="8" sm="9">
                                    <MudTextField Value="@User.IdentityNumber?.Value"
                                    Variant="Variant.Filled"
                                    Dense="true"
                                    Disabled="true"
                                    Style="width: 35%;" />
                                </MudItem>
                            </MudGrid>
                        </MudItem>

                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="4" sm="3" Class="d-flex align-items-center">
                                    <MudText Class="text-h3 mb-2">Fecha de nacimiento:</MudText>
                                </MudItem>
                                <MudItem xs="8" sm="9">
                                    <div style="width: 35%;">
                                        <MudDatePicker @bind-Date="EditableBirthDate"
                                        Variant="Variant.Filled"
                                        Dense="true"
                                        MaxDate="@DateTime.Today"
                                        OnClosed="ValidateBirthDate"
                                        Error="@(!string.IsNullOrWhiteSpace(BirthDateError))"
                                        ErrorText="@BirthDateError" />
                                    </div>
                                </MudItem>
                            </MudGrid>
                        </MudItem>

                        <MudItem xs="12" class="my-6" />

                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="4" sm="3" Class="d-flex align-items-center">
                                    <MudText Class="text-h3 mb-2">Teléfono:</MudText>
                                </MudItem>
                                <MudItem xs="8" sm="9">
                                    <MudTextField @bind-Value="User.Phone.Value"
                                    InputId="phone-input"
                                    Variant="Variant.Filled"
                                    Dense="true"
                                    Style="width: 35%;"
                                    OnBlur="ValidatePhone"
                                    Error="@(!string.IsNullOrWhiteSpace(PhoneError))"
                                    ErrorText="@PhoneError" />
                                </MudItem>
                            </MudGrid>
                        </MudItem>

                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="4" sm="3" Class="d-flex align-items-center">
                                    <MudText Class="text-h3 mb-2">Correo electrónico:</MudText>
                                </MudItem>
                                <MudItem xs="8" sm="9">
                                    <MudTextField @bind-Value="User.Email.Value"
                                    InputId="email-input"
                                    Variant="Variant.Filled"
                                    Dense="true"
                                    Style="width: 35%;"
                                    OnBlur="ValidateEmail"
                                    Error="@(!string.IsNullOrWhiteSpace(EmailError))"
                                    ErrorText="@EmailError" />
                                </MudItem>
                            </MudGrid>
                        </MudItem>

                        <MudItem xs="12" class="my-6" />

                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="4" sm="3" Class="d-flex align-items-center">
                                    <MudText Class="text-h3 mb-2">Nombre de usuario:</MudText>
                                </MudItem>
                                <MudItem xs="8" sm="9">
                                    <MudTextField @bind-Value="User.UserName.Value"
                                    Variant="Variant.Filled"
                                    Dense="true"
                                    Style="width: 35%;"
                                    OnBlur="ValidateUserName"
                                    Error="@(!string.IsNullOrWhiteSpace(UserNameError))"
                                    ErrorText="@UserNameError" />
                                </MudItem>
                            </MudGrid>
                        </MudItem>

                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="4" sm="3" Class="d-flex align-items-center">
                                    <MudText Class="text-h3 mb-2">Selecciona los roles:</MudText>
                                </MudItem>
                                <MudItem xs="8" sm="9">
                                    <div style="display: flex; align-items: center; width: 35%;">
                                        <MudSelect T="string"
                                        Variant="Variant.Filled"
                                        Dense="true"
                                        SelectedValues="SelectedRoleNames"
                                        SelectedValuesChanged="roles => SelectedRoleNames = roles.ToList()"
                                        MultiSelection="true"
                                        Style="height: 40px; width: 35%;">
                                            @foreach (var role in AvailableRoles)
                                            {
                                                <MudSelectItem T="string" Value="@role.Name">@role.Name</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </div>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    </MudGrid>


                    @if (ShowError)
                    {
                        <MudItem xs="12" class="my-6" />
                        <MudAlert Severity="Severity.Error" Class="mx-auto" Style="max-width: 1000px;">
                            @ErrorMessage
                        </MudAlert>
                    }

                    <div class="d-flex justify-content-end align-items-center mt-4">
                        <div class="d-flex gap-2">
                            <div class="cancel-wrapper">
                                <CustomButton ButtonType="cancel"
                                Variant="Variant.Outlined"
                                OnClick="@OnCancelClicked">
                                    CANCELAR
                                </CustomButton>
                            </div>

                            <CustomButton ButtonType="add"
                            Variant="Variant.Filled"
                            OnClick="@OnSaveClicked">
                                GUARDAR
                            </CustomButton>
                        </div>
                    </div>
                </MudPaper>

            </MudContainer>

        }
        else
        {
            <MudText Class="ms-4 mt-4">Cargando información del usuario...</MudText>
        }
    </div>
</div>

@code {
    private string? FirstNameError;
    private string? LastNameError;
    private string? UserNameError;
    private string? PhoneError;
    private string? EmailError;
    private string? BirthDateError;

    private string? originalUsername; 

    private bool _firstNameRequired;
    private bool _lastNameRequired;
    private bool _userNameRequired;
    private bool _phoneRequired;
    private bool _emailRequired;
    private bool _birthDateRequired;

    private List<string> SelectedRoleNames = new();
    private List<Role> AvailableRoles = new();
    private UserWithPerson? User;
    private DateTime? EditableBirthDate;
    private bool ShowError = false;
    private string ErrorMessage = string.Empty;
    private ConfirmDialog? DeleteDialog;

    /// <summary>
    /// Breadcrumb navigation items for the Modify User page.
    /// </summary>
    private List<BreadcrumbItem> _items = new()
    {
        new BreadcrumbItem("INICIO", href: "/"),
        new BreadcrumbItem("ADMINISTRACIÓN DE USUARIOS", href: "/user-management"),
        new BreadcrumbItem("DETALLES DEL USUARIO", href: "/user-details"),
        new BreadcrumbItem("MODIFICAR USUARIO", href: "/modify-user")
    };

    /// <summary>
    /// Handles the cancel button click event, navigating back to the user management page.
    /// </summary>
    private void OnCancelClicked()
    {
        NavManager.NavigateTo("/user-management");
    }

    /// <summary>
    /// Initializes the component by loading the selected user and available roles.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        if (NavContext.SelectedUserId.HasValue)
        {
            var users = await UserWithPersonService.GetAllUserWithPersonAsync();
            User = users.FirstOrDefault(u => u.UserId == NavContext.SelectedUserId);

            if (User != null)
            {
                originalUsername = User.UserName.Value; 
            }

            if (User?.Roles?.Any() == true)
                SelectedRoleNames = User.Roles.ToList();

            if (User?.BirthDate != null)
                EditableBirthDate = User.BirthDate.Value.ToDateTime(TimeOnly.MinValue);
        }

        AvailableRoles = await RoleService.GetAllRolesAsync();
    }

    /// <summary>
    /// Handles the delete button click event, showing a confirmation dialog and deleting the user if confirmed.
    /// </summary>
    private async Task OnDeleteClicked()
    {
        if (User is null)
            return;

        bool confirmed = await DeleteDialog!.ShowAsync();

        if (!confirmed)
            return;

        bool deleted = await UserWithPersonService.DeleteUserWithPersonAsync(User.UserId, User.PersonId);

        if (deleted)
        {
            Snackbar.Add("Usuario eliminado exitosamente.", Severity.Success);
            NavManager.NavigateTo("/user-management");
        }
        else
        {
            Snackbar.Add("Ocurrió un error al eliminar el usuario.", Severity.Error);
        }
    }

    /// <summary>
    /// Handles the edit/save logic, including validation and updating the user information.
    /// </summary>
    private async Task OnEditClicked()
    {
        _firstNameRequired = true;
        _lastNameRequired = true;
        _userNameRequired = true;
        _phoneRequired = true;
        _emailRequired = true;
        _birthDateRequired = true;

        ValidateFirstName();
        ValidateLastName();
        ValidateUserName();
        ValidatePhone();
        ValidateEmail();
        ValidateBirthDate();

        if (!string.IsNullOrEmpty(FirstNameError) ||
            !string.IsNullOrEmpty(LastNameError) ||
            !string.IsNullOrEmpty(UserNameError) ||
            !string.IsNullOrEmpty(PhoneError) ||
            !string.IsNullOrEmpty(EmailError) ||
            !string.IsNullOrEmpty(BirthDateError))
        {
            return;
        }

        if (User is null)
            return;
        try
        {
            ClearAllErrors();
            User.Roles = SelectedRoleNames;
            User.BirthDate = BirthDate.Create(DateOnly.FromDateTime(EditableBirthDate!.Value));

            await UserWithPersonService.ValidateUserUniquenessAsync(User);

            var success = await UserWithPersonService.UpdateUserWithPersonAsync(User!);

            if (success)
            {
                Snackbar.Add("Usuario actualizado correctamente.", Severity.Success);
                NavManager.NavigateTo("/user-management");
            }
        }
        catch (DuplicatedEntityException dupEx)
        {
            ShowError = true;
            ErrorMessage = dupEx.Message;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            ShowError = true;
            ErrorMessage = "Ocurrió un error al actualizar el usuario";
            Console.WriteLine($"Error inesperado: {ex}");
            StateHasChanged();
        }
    }



    /// <summary>
    /// Handles the save button click event, showing a processing message and invoking the edit logic.
    /// </summary>
    private async Task OnSaveClicked()
    {
        await OnEditClicked();
    }

    /// <summary>
    /// Validates the first name field and sets the corresponding error message if invalid.
    /// </summary>
    private void ValidateFirstName()
    {
        if (_firstNameRequired && string.IsNullOrWhiteSpace(User?.FirstName?.Trim()))
        {
            FirstNameError = "El nombre es obligatorio.";
        }
        else if (User?.FirstName?.Trim().Length > 50)
        {
            FirstNameError = "El nombre debe tener como máximo 50 caracteres.";
        }
        else
        {
            FirstNameError = null;
        }
    }

    /// <summary>
    /// Validates the last name field and sets the corresponding error message if invalid.
    /// </summary>
    private void ValidateLastName()
    {
        if (_lastNameRequired && string.IsNullOrWhiteSpace(User?.LastName?.Trim()))
        {
            LastNameError = "El apellido es obligatorio.";
        }
        else if (User?.LastName?.Trim().Length > 50)
        {
            LastNameError = "El apellido debe tener como máximo 50 caracteres.";
        }
        else
        {
            LastNameError = null;
        }
    }

    /// <summary>
    /// Validates the username field and sets the corresponding error message if invalid.
    /// </summary>
    private void ValidateUserName()
    {
        if (_userNameRequired && string.IsNullOrWhiteSpace(User?.UserName?.Value))
        {
            UserNameError = "El nombre de usuario es obligatorio.";
        }
        else if (!Regex.IsMatch(User?.UserName?.Value ?? "", @"^[a-z0-9._]{1,50}$"))
        {
            UserNameError = "El nombre de usuario solo puede contener letras minúsculas, números, puntos o guiones bajos y debe tener como máximo 50 caracteres.";
        }
        else
        {
            UserNameError = null;
        }
    }

    /// <summary>
    /// Validates the phone field and sets the corresponding error message if invalid.
    /// </summary>
    private void ValidatePhone()
    {
        if (_phoneRequired && string.IsNullOrWhiteSpace(User?.Phone?.Value))
        {
            PhoneError = "El teléfono es obligatorio.";
        }
        else if (!Regex.IsMatch(User?.Phone?.Value ?? "", @"^\d{4}-\d{4}$"))
        {
            PhoneError = "El teléfono debe tener el formato ####-####.";
        }
        else
        {
            PhoneError = null;
        }
    }

    /// <summary>
    /// Validates the email field and sets the corresponding error message if invalid.
    /// </summary>
    private void ValidateEmail()
    {
        if (_emailRequired && string.IsNullOrWhiteSpace(User?.Email?.Value))
        {
            EmailError = "El correo electrónico es obligatorio.";
        }
        else if (!Regex.IsMatch(User?.Email?.Value ?? "", @"^[^@\s]+@[^@\s]+\.[^@\s]+$"))
        {
            EmailError = "El correo electrónico no tiene un formato válido.";
        }
        else
        {
            EmailError = null;
        }
    }

    /// <summary>
    /// Validates the birth date field and sets the corresponding error message if invalid.
    /// </summary>
    private void ValidateBirthDate()
    {
        if (_birthDateRequired && !EditableBirthDate.HasValue)
        {
            BirthDateError = "La fecha de nacimiento es obligatoria.";
        }
        else if (EditableBirthDate > DateTime.Today)
        {
            BirthDateError = "La fecha de nacimiento no puede ser en el futuro.";
        }
        else
        {
            BirthDateError = null;
        }
    }

    /// <summary>
    /// Clears all error messages and hides the error alert.
    /// </summary>
    private void ClearAllErrors()
    {
        UserNameError = null;
        EmailError = null;
        ShowError = false;
        ErrorMessage = string.Empty;
    }

}